package co.kh.practice.chap01_poly.controller;

import co.kh.practice.chap01_poly.model.vo.AniBook;
import co.kh.practice.chap01_poly.model.vo.Book;
import co.kh.practice.chap01_poly.model.vo.CookBook;
import co.kh.practice.chap01_poly.model.vo.Member;

public class LibraryController {
	
	private Member mem=null;
	private Book[] bList=new Book[5];
	
	{
		bList[0] = new CookBook("백종원의 집밥","백종원","tvn",true);
		bList[1] = new AniBook("한번 더 해요","미티","원모어",19);
		bList[2] = new AniBook("루피의 원피스","루피","japan",12);
		bList[3] = new CookBook("이혜정의 얼마나 맛있게요","이혜정","문학",false);
		bList[4] = new CookBook("최현석 날 따라해봐","최형석","소금책",true);
	}
	
	public void insertMember(Member mem2) {
		//전달받은 mem의 주소값을 통해 LibraryController의 mem에 대입
		mem=mem2;
	}
	
	public Member myInfo() {
		//회원 레퍼런스(mem) 주소값 리턴
		return mem;
		
	}
	
	public Book[] seletcAll() {
		//도서 전체 목록(bList) 주소값 리턴
		return bList;
	}
	
	public Book[] searchBook(String keyword) {
		//전달받은 키워드가 포함된 도서가 여러 개 존재할 수 있으니 
		//검색된 도서를 담아줄 Book 객체 배열을 새로 생성하고
		//for문을 통해 bList 안의 도서들과 전달받은 키워드를 비교하여
		//포함하고 있는 경우 새로운 배열에 차곡차곡 담기 - 그 배열 주소값 리턴
		
		Book[] searchList = new Book[5];
		int count = 0;
		
		for(int i=0; i<bList.length; i++) {
			if(bList[i].getTitle().contains(keyword)) {
				searchList[count]=bList[i];
				count++;
			}
		} return searchList;	
	}
	
	public int rentBook(int index) {
		//result를 0으로 초기화 한 후 
		//전달받은 인덱스의 도서가 만화책인 경우 
		//회원의 나이와 해당 만화책의 제한 나이를 비교하여 회원 나이가 더 적은경우 result1로 초기화
		//전달받은 인덱스의 도서가 요리책인 경우
		//해당 요리책의 쿠폰 유무가 유 일 경우 회원의 couponCount를 1증가 시킨 후 result를 2로 초기화
		//result리턴
		
		int result = 0;
		
		if(bList[index] instanceof AniBook) {
			if (mem.getAge()<((AniBook)bList[index]).getAcessAge()) {
				result = 1;
			} 
			
		} else if (bList[index] instanceof CookBook) {
				if(((CookBook)bList[index]).isCoupon()==true) {
					mem.setCouponCount(mem.getCouponCount()+1);
					result = 2;
			}
		}
		return result;
	}

}
