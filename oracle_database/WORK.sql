--1.춘 기술대학교의 학과 이름과 계열 표시. 단, 출력 헤더는 "학과명 ", "계열"로 표시하기
SELECT DEPARTMENT_NAME AS 학과명, CATEGORY AS 계열
FROM TB_DEPARTMENT;

--2.학과별 정원 출력, 00학과의 정원은 00명 입니다.
SELECT DEPARTMENT_NAME|| '의 정원은' || CAPACITY || '명 입니다.'
FROM TB_DEPARTMENT;

--3."국어국문학과"에 다니는 여학생 중 현재 휴학중인 여학생의 이름 조회
SELECT * FROM TB_STUDENT;
SELECT * FROM TB_DEPARTMENT;

SELECT STUDENT_NAME
FROM TB_STUDENT
WHERE ABSENCE_YN='Y' AND SUBSTR(STUDENT_SSN,8,1)='2' AND DEPARTMENT_NO='001' ;

--4.도서관에서 대출 도서 장기 연체자들을 찾아 이름을 게시하고자 함
--대상자들의 학번이 A513079, A513090, A513091, A513110, A513119일 때 알맞은 구문 작성하기
SELECT STUDENT_NAME
FROM TB_STUDENT
WHERE STUDENT_NO  IN('A513079', 'A513090', 'A513091', 'A513110', 'A513119')
ORDER BY 1 DESC;

--5.입학정원이 20명 이상 30명 이하인 학과들의 학과이름과 계열 출력하기
SELECT DEPARTMENT_NAME, CATEGORY
FROM TB_DEPARTMENT
WHERE CAPACITY BETWEEN 20 AND 30;

--6.총장을 제외하고 모든 교수들이 소속 학과를 가지고 있다. 총장의 이름을 알아낼 수 있는 구문 작성하기
SELECT * FROM TB_PROFESSOR;

SELECT PROFESSOR_NAME
FROM TB_PROFESSOR
WHERE DEPARTMENT_NO IS NULL;

--7.전산상의 착오로 학과가 지정되어 있지 않은 학생이 있는지 확인하고자 하는 구문 작성하기
SELECT STUDENT_NAME
FROM TB_STUDENT
WHERE  DEPARTMENT_NO IS NULL;

--8.선수과목이 존재하는 과목들은 어떤 과목인지 과목번호 조회하기
SELECT * FROM TB_CLASS;

SELECT CLASS_NO
FROM TB_CLASS
WHERE PREATTENDING_CLASS_NO IS NOT NULL;

--9. 춘 대학에는 어떤 계열들이 있는지 조회하기
SELECT DISTINCT CATEGORY
FROM TB_DEPARTMENT
ORDER BY 1;

--10. 02학번 전주 거주자들의 모임을 만들려고 한다. 
--휴학한 사람들은 제외하고 재학 중인 학생들의 학번,이름,주민번호를 출력하기
SELECT * FROM TB_STUDENT;

SELECT STUDENT_NO, STUDENT_NAME, STUDENT_SSN
FROM TB_STUDENT
WHERE ABSENCE_YN='N' AND 
EXTRACT(YEAR FROM ENTRANCE_DATE)=2002 AND
SUBSTR(STUDENT_ADDRESS,1,3)='전주시';

--함수
--1.영어영문학과(학과코드 002) 학생들의 학번, 이름,입학년도를 
--입학년도가 빠른 순으로 표시하기
SELECT STUDENT_NO AS 학번, 
    STUDENT_NAME AS 이름, 
    TO_CHAR(ENTRANCE_DATE,'YYYY-MM-DD') AS 입학년도
FROM TB_STUDENT
WHERE DEPARTMENT_NO=002
ORDER BY 3;

--2.이름이 세 글자가 아닌 교수의 이름과 주민번호를 출력하기
SELECT PROFESSOR_NAME, PROFESSOR_SSN
FROM TB_PROFESSOR
WHERE LENGTH(PROFESSOR_NAME) != 3;

--3.남자 교수들의 이름과 나이를 나이순으로 출력하기(나이는 만 나이)
--단 2000년 이후 출생자는 없으며 출력 헤더는 "교수이름" ,"나이"로 하기 
SELECT * FROM TB_PROFESSOR;

SELECT PROFESSOR_NAME AS 교수이름, 
    TO_NUMBER(EXTRACT(YEAR FROM SYSDATE)) -1900- TO_NUMBER(SUBSTR(PROFESSOR_SSN,1,2)) +1 AS 나이
FROM  TB_PROFESSOR
WHERE SUBSTR(PROFESSOR_SSN,8,1)='1'
ORDER BY 2;

--4. 교수들의 성을 제외한 이름만 출력. 출력 헤더는 "이름". 성이 2자인 교수는 없다고 가정
SELECT SUBSTR(PROFESSOR_NAME,2,3)
FROM TB_PROFESSOR;

--5. 재수생 입학자 찾기. 19살에 입학하면 재수가 아닌 것으로 간주하기
SELECT * FROM TB_STUDENT;

SELECT STUDENT_NO, STUDENT_NAME
FROM  TB_STUDENT
WHERE TO_NUMBER(EXTRACT(YEAR FROM ENTRANCE_DATE)) - (TO_NUMBER(SUBSTR(STUDENT_SSN,1,2))+1900) = 20;

--6.2020년 크리스마스는 무슨 요일인지 출력 
SELECT TO_CHAR(TO_DATE('20201225', 'YYYYMMDD'),'DAY') FROM DUAL;

--7.년월일 출력하기
SELECT EXTRACT(YEAR FROM (TO_DATE('99/10/11', 'YY/MM/DD'))) || '년' ||
        EXTRACT(MONTH FROM (TO_DATE('99/10/11', 'YY/MM/DD'))) || '월' ||
        EXTRACT(DAY FROM (TO_DATE('99/10/11', 'YY/MM/DD'))) || '일' 
FROM DUAL;

SELECT EXTRACT(YEAR FROM (TO_DATE('49/10/11', 'YY/MM/DD'))) || '년' ||
        EXTRACT(MONTH FROM (TO_DATE('49/10/11', 'YY/MM/DD'))) || '월' ||
        EXTRACT(DAY FROM (TO_DATE('49/10/11', 'YY/MM/DD'))) || '일' 
FROM DUAL;

SELECT EXTRACT(YEAR FROM (TO_DATE('99/10/11', 'RR/MM/DD'))) || '년' ||
        EXTRACT(MONTH FROM (TO_DATE('99/10/11', 'RR/MM/DD'))) || '월' ||
        EXTRACT(DAY FROM (TO_DATE('99/10/11', 'RR/MM/DD'))) || '일' 
FROM DUAL;

SELECT EXTRACT(YEAR FROM (TO_DATE('49/10/11', 'RR/MM/DD'))) || '년' ||
        EXTRACT(MONTH FROM (TO_DATE('49/10/11', 'RR/MM/DD'))) || '월' ||
        EXTRACT(DAY FROM (TO_DATE('49/10/11', 'RR/MM/DD'))) || '일' 
FROM DUAL;

--8. 2000년도 이전 학번을 받은 학생들의 학번과 이름을 보여주는 구문 작성
-- 2000년도 이후 입학자들은 학번이 A로 시작함
SELECT STUDENT_NO, STUDENT_NAME
FROM TB_STUDENT
WHERE SUBSTR(STUDENT_NO,1,1) != 'A'; 

--9. 학번이 A517178인 한아름 학생의 학점 총 평균을 구하기
--출력 화면 헤더는 "평점", 점수는 소수점 한 자리까지만 표시
SELECT ROUND(AVG(POINT),1) AS 학점
FROM TB_GRADE
WHERE STUDENT_NO = 'A517178';

--10. 학과별 학생 수를 구하여 "학과번호", "학생수(명)"의 형태로 결과값 출력
SELECT DEPARTMENT_NO AS 학과번호, CAPACITY AS "학생수(명)"
FROM TB_DEPARTMENT;

--11. 지도 교수를 배정받지 못한 학생 수 구하기
SELECT COUNT(*)
FROM TB_STUDENT
WHERE COACH_PROFESSOR_NO IS NULL;

--12. 학번이 A112113인 김고운 학생의 년도 별 평점 구하기
--출력 헤더는 "년도", "년도 별 평점", 점수는 반올림해서 소수점 이하 한 자리까지만 표시
SELECT * FROM TB_GRADE  ORDER BY STUDENT_NO;
--WHERE STUDENT_NO = ' A112113';
SELECT * FROM TB_STUDENT WHERE STUDENT_NAME = '김고운';

SELECT SUBSTR(TERM_NO,1,4) AS 년도,
    ROUND(AVG(POINT),1) AS "년도 별 평점"
FROM TB_GRADE
WHERE  STUDENT_NO = 'A112113'
GROUP BY SUBSTR(TERM_NO,1,4)
ORDER BY 1;


--13. 학과 별 휴학생 수 파악. 학과 번호와 휴학생 수 표시
--내가 한 거. 0명이면 건너 뜀
SELECT DEPARTMENT_NO, COUNT(*)
FROM TB_STUDENT 
WHERE ABSENCE_YN = 'Y'
GROUP BY DEPARTMENT_NO
ORDER BY DEPARTMENT_NO;

SELECT DEPARTMENT_NO AS 학과코드명,
COUNT(DECODE(ABSENCE_YN, 'Y', '1')) AS "휴학생 수"
FROM TB_STUDENT
GROUP BY DEPARTMENT_NO
ORDER BY DEPARTMENT_NO ASC;

--14. 동명이인 학생들의 이름, 동명인 수 구하기
SELECT STUDENT_NAME, COUNT(*)
FROM TB_STUDENT
GROUP BY STUDENT_NAME
HAVING COUNT(*) >=2;

--15. 학번이 A112113인 김고운 학생의 년도, 학기 별 평점과 년도별 누적 평점, 총 평점 구하기
--출력 헤더 "년도","학기","평점". 평점은 소수점 1자리까지만 반올림하여 표시
SELECT SUBSTR(TERM_NO,1,4) AS 년도,
    SUBSTR(TERM_NO, 5, 2) AS 학기,
    ROUND(AVG(POINT),1) AS "년도 별 평점"
FROM TB_GRADE
WHERE  STUDENT_NO = 'A112113'
GROUP BY ROLLUP (SUBSTR(TERM_NO,1,4),SUBSTR(TERM_NO, 5, 2))
ORDER BY 1;

--OPTION
--1."학생이름","주소지" 출력. 정렬은 이름으로 오름차순 표시
SELECT STUDENT_NAME AS "학생 이름", STUDENT_ADDRESS 주소지
FROM TB_STUDENT
ORDER BY 1;

--2. 휴학 중인 학생들의 이름과 주민번호를 나이가 적은 순서대로 출력
SELECT STUDENT_NAME, STUDENT_SSN
FROM TB_STUDENT
WHERE ABSENCE_YN = 'Y'
ORDER BY 2 DESC;

--3. 주소지가 강원도나 경기도인 학생들 중
--1900년대 학번을 가진 학생들의 이름과 학번, 주소를 이름의 오름차순대로 출력
--출력 헤더는 "학생이름", "학번","거주지 주소"로 출력
SELECT * FROM TB_STUDENT;
SELECT STUDENT_NAME AS 학생이름,
    STUDENT_NO AS 학번,
    STUDENT_ADDRESS AS "거주지 주소"
FROM TB_STUDENT
WHERE SUBSTR(STUDENT_ADDRESS,1,3) IN ('강원도','경기도') 
    AND SUBSTR(STUDENT_NO,1,2) BETWEEN '90' AND '99'
ORDER BY 1;

--4.법학과 교수 중 가장 나이가 많은 사람부터 이름을 확인할 수 있는 구문 작성
SELECT * FROM TB_DEPARTMENT;

SELECT PROFESSOR_NAME, PROFESSOR_SSN
FROM TB_PROFESSOR
WHERE DEPARTMENT_NO = '005'
ORDER BY 2;

--5. 2004년 2학기에 'C3118100'과목을 수강한 학생들의 학점을 조회
--학점이 높은 학생부터 표시하고 학점이 같으면 학번이 낮은 학생부터 표시
SELECT * FROM TB_GRADE;
SELECT STUDENT_NO, TO_CHAR(POINT,'0.00')
FROM TB_GRADE
WHERE TERM_NO='200402' AND CLASS_NO='C3118100'
ORDER BY 2 DESC;

--6.학생 번호, 학생 이름, 학과 이름을 학생 이름으로 오름차순 정렬하여 출력
SELECT STUDENT_NO, STUDENT_NAME, DEPARTMENT_NAME
FROM TB_STUDENT
    JOIN TB_DEPARTMENT USING (DEPARTMENT_NO);

--7. 과목 이름과 과목의 학과 이름 출력
SELECT CLASS_NAME, DEPARTMENT_NAME
FROM  TB_CLASS
    JOIN TB_DEPARTMENT USING(DEPARTMENT_NO);
    
--8. 과목 이름과 교수 이름 출력 
SELECT CLASS_NAME, PROFESSOR_NAME
FROM TB_CLASS
    JOIN TB_PROFESSOR USING (DEPARTMENT_NO); 
   
 SELECT TB_CLASS.CLASS_NAME,
TB_PROFESSOR.PROFESSOR_NAME
FROM TB_CLASS, TB_CLASS_PROFESSOR, TB_PROFESSOR
WHERE TB_CLASS.CLASS_NO = TB_CLASS_PROFESSOR.CLASS_NO
AND TB_CLASS_PROFESSOR.PROFESSOR_NO = TB_PROFESSOR.PROFESSOR_NO
ORDER BY TB_PROFESSOR.PROFESSOR_NAME ASC, CLASS_NAME ASC;

SELECT CLASS_NAME, PROFESSOR_NAME
FROM TB_CLASS
JOIN TB_CLASS_PROFESSOR USING(CLASS_NO)
JOIN TB_PROFESSOR USING(PROFESSOR_NO)
ORDER BY 2,1;

--9.8번의 결과 중 '인문사회' 계열에 속한 과목의 교수 이름 찾기
SELECT * FROM TB_DEPARTMENT;

SELECT CLASS_NAME, PROFESSOR_NAME
FROM TB_CLASS
    JOIN TB_CLASS_PROFESSOR USING(CLASS_NO)
    JOIN TB_PROFESSOR  P USING (PROFESSOR_NO)
    JOIN TB_DEPARTMENT D ON P.DEPARTMENT_NO = D.DEPARTMENT_NO
WHERE CATEGORY = '인문사회'
ORDER BY 2,1; 

SELECT CLASS_NAME, PROFESSOR_NAME
FROM TB_CLASS
JOIN TB_CLASS_PROFESSOR USING(CLASS_NO)
JOIN TB_PROFESSOR USING(PROFESSOR_NO)
JOIN TB_DEPARTMENT ON (TB_PROFESSOR.DEPARTMENT_NO = TB_DEPARTMENT.DEPARTMENT_NO)
WHERE TB_DEPARTMENT.CATEGORY = '인문사회'
ORDER BY TB_PROFESSOR.PROFESSOR_NAME ASC, CLASS_NAME ASC;

--10.'음악학과' 학생들의 평점 구하기. "학번","학생 이름","전체 평점"
SELECT DEPARTMENT_NAME FROM TB_DEPARTMENT;

SELECT STUDENT_NO AS 학번, STUDENT_NAME AS "학생 이름" ,ROUND(AVG(POINT),1) AS "전체 평점"
FROM TB_STUDENT
    JOIN TB_GRADE  USING (STUDENT_NO)
WHERE  DEPARTMENT_NO = (SELECT DEPARTMENT_NO FROM TB_DEPARTMENT WHERE DEPARTMENT_NAME='음악학과')
GROUP BY STUDENT_NO, STUDENT_NAME
ORDER BY 1;

SELECT STUDENT_NO AS 학번,
TB_STUDENT.STUDENT_NAME AS "학생 이름",
ROUND(AVG(TB_GRADE.POINT), 1) AS "전체 평점"
FROM TB_DEPARTMENT
JOIN TB_STUDENT USING(DEPARTMENT_NO)
JOIN TB_GRADE USING(STUDENT_NO)
WHERE TB_DEPARTMENT.DEPARTMENT_NAME = '음악학과'
GROUP BY STUDENT_NO, TB_STUDENT.STUDENT_NAME
ORDER BY STUDENT_NO ASC;

--11. 학번이 A313047인 학생의 학과이름, 학생이름, 지도교수이름 출력
SELECT DEPARTMENT_NAME AS 학과이름, STUDENT_NAME AS 학생이름, PROFESSOR_NAME AS 지도교수이름
FROM TB_DEPARTMENT
    JOIN TB_STUDENT USING(DEPARTMENT_NO)
    JOIN TB_PROFESSOR  ON PROFESSOR_NO =  COACH_PROFESSOR_NO
WHERE S.STUDENT_NO = 'A313047';

--12. 2007년도에 '인간관계론' 과목을 수강한 학생의 이름, 수강학기 표시
--이름 - TB_STUDENT
--학기번호 - TB_GRADE
--과목 이름 - TB_CLASS
SELECT * FROM TB_GRADE; 
SELECT STUDENT_NAME, TERM_NO
FROM TB_STUDENT
    JOIN TB_GRADE USING(STUDENT_NO)
WHERE CLASS_NO = (SELECT CLASS_NO FROM TB_CLASS WHERE CLASS_NAME='인간관계론')
    AND TERM_NO LIKE '2007%';
    
 --13.예체능 계열 과목 중 담당교수를 한 명도 배정받지 못한 과목을 찾아 과목이름, 학과 이름 출력
 SELECT * FROM TB_DEPARTMENT;
SELECT * FROM TB_CLASS_PROFESSOR;
--예체능 계열 : CATEGORY FROM TB_DEPARTMENT
--담당 교수 : PROFESSOR_NO FROM TB_CLASS_PROFESSOR
--과목 이름 : CLASS_NAME FROM TB_CLASS
--학과 이름 : DEPARTMENT_NAME FROM TB_DEPARTMENT
 SELECT CLASS_NAME,DEPARTMENT_NAME
 FROM TB_CLASS
    JOIN TB_DEPARTMENT USING(DEPARTMENT_NO)
WHERE CATEGORY = '예체능'
    AND CLASS_NO NOT IN (SELECT CLASS_NO FROM TB_CLASS_PROFESSOR ) 
    ORDER BY 2,1;

--14. 서반아어학과 "학생이름"과 "지도교수"이름 출력. 지도교수 없으면 "지도교수 미지정"
--고학번이 먼저 표시되도록 하기
SELECT * FROM TB_DEPARTMENT;

SELECT STUDENT_NAME AS 학생이름, NVL(PROFESSOR_NAME,'지도교수 미지정') AS 지도교수
FROM TB_STUDENT  S
    LEFT OUTER JOIN TB_PROFESSOR ON COACH_PROFESSOR_NO = PROFESSOR_NO
WHERE S.DEPARTMENT_NO = (SELECT DEPARTMENT_NO FROM TB_DEPARTMENT WHERE DEPARTMENT_NAME='서반아어학과')
ORDER BY ENTRANCE_DATE;

--15. 휴학생이 아닌 학생 중 4.0 이상인 학생의 학번, 이름, 학과이름, 평점 출력
SELECT STUDENT_NO, STUDENT_NAME, DEPARTMENT_NAME, TRUNC(AVG(POINT),8)
FROM TB_STUDENT 
    JOIN TB_DEPARTMENT USING(DEPARTMENT_NO)
    JOIN TB_GRADE USING (STUDENT_NO)
WHERE ABSENCE_YN = 'N' 
GROUP BY STUDENT_NO, STUDENT_NAME, DEPARTMENT_NAME
HAVING AVG(POINT) >= 4 
ORDER BY 1;

--16.환경조경학과 전공과목들의 과목 별 평점을 조회
SELECT * FROM TB_CLASS;

SELECT CLASS_NO, CLASS_NAME, TRUNC(AVG(POINT),8)
FROM TB_CLASS
    JOIN TB_GRADE USING( CLASS_NO)
WHERE DEPARTMENT_NO = (SELECT DEPARTMENT_NO FROM TB_DEPARTMENT WHERE DEPARTMENT_NAME = '환경조경학과')
    AND CLASS_TYPE LIKE '전공%'
GROUP BY CLASS_NO, CLASS_NAME
ORDER BY 1;

--17.최경희 학생과 같은 과 학생들의 이름과 주소 출력
SELECT STUDENT_NAME, STUDENT_ADDRESS
FROM TB_STUDENT
WHERE DEPARTMENT_NO = (SELECT DEPARTMENT_NO FROM TB_STUDENT WHERE STUDENT_NAME = '최경희');


--18. 국어국문학과에서 총 평점이 가장 높은 학생의 이름과 학번을 출력
--국어국문학과 학생의 이름과 학번 출력
SELECT STUDENT_NO, STUDENT_NAME
FROM TB_STUDENT
JOIN TB_GRADE USING(STUDENT_NO)
WHERE DEPARTMENT_NO = (SELECT DEPARTMENT_NO FROM TB_DEPARTMENT WHERE DEPARTMENT_NAME = '국어국문학과')
GROUP BY STUDENT_NO, STUDENT_NAME
--국어국문학과 학생 중 총 평점이 가장 높은 학생의 총평점
HAVING AVG(POINT) = (SELECT MAX(AVG(POINT)) FROM TB_GRADE
        JOIN TB_STUDENT USING(STUDENT_NO)
        JOIN TB_DEPARTMENT USING(DEPARTMENT_NO)
    WHERE DEPARTMENT_NAME = '국어국문학과'
    GROUP BY STUDENT_NO);


--19. 환경조경학과가 속한 같은 계열 학과들의 학과 별 전공과목 평점을 파악.
--출력헤더는 "계열 학과명", "전공평점", 평점은 소수점 한 자리까지만 반올림
SELECT * FROM TB_DEPARTMENT;
SELECT * FROM TB_GRADE;

SELECT DEPARTMENT_NAME AS "계열 학과명", ROUND(AVG(POINT),1) 전공평점
FROM TB_DEPARTMENT 
    JOIN TB_STUDENT USING(DEPARTMENT_NO)
    JOIN TB_GRADE USING (STUDENT_NO)
WHERE CATEGORY =  (SELECT CATEGORY FROM TB_DEPARTMENT WHERE DEPARTMENT_NAME = '환경조경학과')
GROUP BY DEPARTMENT_NAME
ORDER BY DEPARTMENT_NAME;

--문자열 '190505' 를 '2019년5월5일'로 출력
SELECT TO_CHAR(TO_DATE('190505','YYMMDD'), 'YYYY"년"fmMM"월"DD"일"') FROM DUAL;

--SCOTT DB 과제
--1.계정이 가지고 있는 테이블 모두 검색
SELECT * FROM TAB;
--2. EMP테이블의 컬럼 출력
DESC EMP;
--3.EMP테이블에서 ENAME, SAL, 연봉, 월 수령액(보너스 SALARY의 5%), 월 실수령액(세금 3%, 보너스는 세금에서 제외)출력
SELECT ENAME, SAL, SAL*12 연봉, SAL+(SAL*0.05) "월 수령액", SAL*0.97+ (SAL*0.05) "월실수령액"
FROM EMP;
--4.EMP테이블에서 ENAME, SAL, COMM, 계산금액(SAL*12+COMM)를 출력
SELECT ENAME, SAL, COMM, SAL*12+NVL(COMM,0) 계산금액
FROM EMP;
--5.EMP테이블의 ENAME, JOB을 이용하여 출력
SELECT ENAME || '는 직책이 ' || JOB || '입니다.'
FROM EMP;
--6.EMP테이블에서 JOB출력시 중복값을 제거하고 출력
SELECT DISTINCT JOB
FROM EMP;
--8.EMP테이블에서 SAL이 3000이상인 사원의 전체 컬럼 출력
SELECT * FROM EMP WHERE SAL >=3000;
--9.EMP테이블에서 DEPTNO가 10이거나 MANAGER인 사원을 출력
SELECT * 
FROM EMP
WHERE DEPTNO = 10 OR JOB = 'MANAGER';
--10.EMP테이블에서 DEPTNO가 20이 아니고, JOB이 MANAGER인 사원 출력
SELECT *
FROM EMP
WHERE DEPTNO != 20 AND JOB='MANAGER';
 --11.EMP 테이블에서 JOB이 MANAGER이거나 PRESIDENT이거나 ANALYST인 사원 출력
 SELECT *
 FROM EMP
 WHERE JOB IN ('MANAGER','PRESIDENT','ANALYST');
 --12. EMP테이블에서 SAL이 2000이하이거나 SAL이 3000이상이고 고용일이 81/01/01~82/12/31의 사원 출력
 SELECT *
 FROM EMP
 WHERE (SAL <= 2000 OR SAL>=3000) AND HIREDATE BETWEEN '81/01/01' AND '82/12/31';
 --13.EMP테이블에서 SAL이 2000미만이거나 SAL이 3000초과인 사원을 BETWEEN을 사용하여 출력
 SELECT *
 FROM EMP
 WHERE SAL NOT BETWEEN 2000 AND 3000;
 --14.EMP테이블에서 이름에 'K'나 'A'나 'M'이 포함되지 않는 사원의 이름, 직책, 고용일 출력
 SELECT ENAME, JOB, HIREDATE
 FROM EMP
 WHERE ENAME NOT LIKE '%K%' AND  ENAME NOT LIKE '%A%' AND ENAME NOT LIKE '%M%';
 --15.EMP테이블에서 DEPTNO가 20,30,10인 사원의 ENAME,DEPTNO 출력
 SELECT ENAME, DEPTNO
 FROM EMP
 WHERE DEPTNO IN(20,30,10);
 --16.EMP테이블에서 MGR의 2,3번째가 6,9인 사원의 ENAME, MRG출력
 SELECT ENAME, MGR
 FROM EMP
 WHERE SUBSTR(MGR,2,2) = 69;
 --17.EMP 테이블에서 COMM이 NULL이고 HIREDATE가 81년도인 사원의 ENAME,HIREDATE,SAL, COMM출력
 SELECT  ENAME,HIREDATE,SAL, COMM
 FROM EMP
 WHERE COMM IS NULL AND EXTRACT(YEAR FROM HIREDATE) ='1981';
 --18.EMP테이블에서 SAL이 2500이상이고 HIREDATE가 81년도인 사원의 EMPNO, ENAME, HIREDATE, SAL을
 --EMPNO 오름차순정렬, ENAME 내림차순 정렬 출력
 SELECT EMPNO, ENAME, HIREDATE, SAL
 FROM EMP
 WHERE SAL >= 2500 AND EXTRACT(YEAR FROM HIREDATE) ='1981'
 ORDER BY EMPNO ASC, ENAME DESC;
 --19.EMP테이블에서 SAL을 12로 나누고 소수점을 버림. SAL기준으로 내림차순 정렬
 SELECT ENAME, SAL, TRUNC(SAL/12) 월급
 FROM EMP
 ORDER BY SAL DESC;
 --20.DUAL테이블에서 숫자함수를 이용하여 값 출력
 --233에 2나눈 나머지값 / 233.15123에서 소수 첫번째 자리까지 출력(버림) / 233.15123에서 두 번째 자리에서 반올림
 SELECT MOD(233,2) 나머지 , TRUNC(233.15123, 1) , ROUND(233.15123, 1) FROM DUAL;
 --21.EMP테이블에서 ENAME에 A가 포함되고 ENAME길이가 5인 사원의 
 --ENAME, ENAME의 첫글자만 대문자, HIREDATE의 년도, 'A'가 있는 위치값, ENAME앞에 @넣은 값, A를 *로 변경한 값 출력
 SELECT ENAME, INITCAP(ENAME) 첫글자대문자 , SUBSTR(HIREDATE,1,2) 년, INSTR(ENAME, 'A') A위치, 
        '@'||ENAME "@넣기", REPLACE(ENAME,'A','*')
    FROM EMP
    WHERE ENAME LIKE '%A%' AND LENGTH(ENAME) = 5;
--22. EMP테이블에서 HIREDATE부터 현재일까지 지난달이 420 이상이고
--HIREDATE로부터 5개월이 지난 날이 82/01/01~82/12/31사이이고 HIREDATE의 월이 9월달 초과인 
--사원의 ENAME, 현재일, HIREDATE,지난달수, 5개월후, 고용일 출력
SELECT SYSDATE, HIREDATE, TRUNC(MONTHS_BETWEEN(SYSDATE, HIREDATE)) 지난달수,
            ADD_MONTHS(HIREDATE,5) "5개월후", TRUNC(SYSDATE - HIREDATE) 고용일
FROM EMP
WHERE  TRUNC(MONTHS_BETWEEN(SYSDATE, HIREDATE))  >= 420 AND    ADD_MONTHS(HIREDATE,5) BETWEEN '82/01/01' AND '82/12/31' 
        AND EXTRACT(MONTH FROM HIREDATE) > 9;
        
--인라인뷰로 바꿔보기
SELECT *
FROM (
    SELECT SYSDATE, HIREDATE, TRUNC(MONTHS_BETWEEN(SYSDATE, HIREDATE)) 지난달수,
            ADD_MONTHS(HIREDATE,5) "5개월후", TRUNC(SYSDATE - HIREDATE) 고용일
    FROM EMP
)
WHERE 지난달수 >= 420 AND
    "5개월후" BETWEEN '82/01/01' AND '82/12/31' AND 
    EXTRACT(MONTH FROM HIREDATE) > 9;
        