package com.poly.main;

import com.poly.controller.Functional;
import com.poly.model.vo.Animal;
import com.poly.model.vo.Cat;
import com.poly.model.vo.Duck;
import com.poly.model.vo.Employee;
import com.poly.model.vo.Lion;
import com.poly.model.vo.Person;
import com.poly.model.vo.Singer;

public class Main {
	
	public static void main(String[] args) {
		//다형성 활용하기
		//부모 타입으로 설정되어 있는 변수에
		//자식 타입의 객체가 대입 될 수 있는 것!
		Cat tom = new Cat();
		Duck donald = new Duck();
		Animal ani = new Animal();
		ani = new Cat(); //다형성 //변수명 하나로 여러 개를 받을 수 있다는 장점이 있다
		System.out.println(ani);
		ani = new Duck(); //다형성
		System.out.println(ani);
		ani = new Lion(); //에러! 상속관계가 없기 때문에! 다형성이 적용이 안됨.
		System.out.println(ani);
		//상속 관계가 전제 조건이 됨!
		
		//부모는 자식 타입의 변수에 들어갈 수 있니?
//		tom = new Animal();//부모타입은 자식타입에게 대입될 수 없다!
		
		//다형성에 의해 자식 객체가 부모 타입으로 대입되면,
		//부모객체의 내용만 볼 수 있게 설정됨(업캐스팅)
		Person p = new Employee("설진호",48,"포천","개발팀","연구원",100);//person인 척 함
		System.out.println(p.getName());
		//System.out.println(p.getDepartment());//부모가 가지고 있는 데이터만 볼 수 있음
		//자식의 내용은 볼 수 없게 됨. 뒤3개는 쓸 수 없게 되어 이용할 필요가 없게 됨.
	
		//Employee e = (Employee)p; //Employee가 p로 됬으니까 형변환해서 넣어 줌. 형변한 순서 주의
		
		//부모타입으로 대입된 자식객체의 데이터에 접근을 하려면
		//반드시 강제형변환을 해야 함!
		
		
		//괄호 안에 형변환할 객체
		//연산자 우선순위! ()나 .붙은 게 제일 빠름. 형변환 후 접근해야해서 괄호로 먼저 묶음
		//형변환하면 가려져있던 거 해제시킴..
		System.out.println(((Employee)p).getDepartment());
		Person p = new Singer("김세민", 32, "남양주", "너만 보인단 말이야",2,"밴드");
		
		//Singer s = (Singer)p; 
		
		//functional 객체에서 지원하는 출력메소드 이용 객체 출력하기
		
		Employee e = new Employee("설진호",48,"포천","개발팀","연구원",100);
		Singer s = new Singer("김세민", 32, "남양주", "너만 보인단 말이야",2,"밴드");
		//Employee e = (Employee)p;
		//Singer s = (Singer)p; 와 같은 의미. 값이 똑같으니까
		
		new Functional().print(e); //person의 자식이어서 매개변수 p로 받아도 에러 안남
		new Functional().print(s);
		
	}
	

}
