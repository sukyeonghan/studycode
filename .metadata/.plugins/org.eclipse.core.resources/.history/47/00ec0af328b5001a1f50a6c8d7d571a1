package com.oop.method;

import java.util.Scanner;

//기능제공용 클래스
//여기에 메소드 다수 구현
public class Functional {
	
	//계산기 
	
	//매개변수가 없고 반환형도 없는 계산기 기능(+만)
	public void calculator() {
		Scanner sc = new Scanner(System.in);
		System.out.println("=== 계산기 프로그램 ===");
		System.out.print("정수 : ");
		int su = sc.nextInt();
		System.out.print("정수 : ");
		int su2 = sc.nextInt();
		System.out.println(su+"+"+su2+"="+(su+su2));
//		System.out.print("연산자(+,-,*,/)");
//		char op = sc.next().charAt(0);
		
		
	}
	
	//반환형 없고 매개변수 있는 메소드로 구현하기
	//계산하는 기능 구현. 이항연산 두 개 값이 정수
	//연산이 변경되려면 연산자도 매개변수로 받아야 함.
	public void calculator2(int su, int su2, String[] operation) {
		System.out.println("=== 계산기 프로그램 ===");
		System.out.println("정수 : "+su);
		System.out.println("정수 : "+su2);
		
		double result = 0;
//		밑과 같음
//		for(int i=0; i<operation.length; i++) {
//			switch(operation[i]) {
//			case "+" : result=su+su2; break;
//			case "-" : result=su-su2; break;
//			case "*" : result=su*su2; break;
//			case "/" : result=(double)su/su2; break;
//			}
//			System.out.println(su+operation[i]+su2+"="+(result));
//		}
		
		for(String op : operation) { //for each문 -0번 인덱스부터 하나씩 들어감
			switch(op) { 
			case "+" : result=su+su2; break;
			case "-" : result=su-su2; break;
			case "*" : result=su*su2; break;
			case "/" : result=(double)su/su2; break;
		}
		
		System.out.println(su+op+su2+"="+(result));
		}
	}
	//이거 호출하면 얘에 대한 stack이 생성됐다가 실행끝나면 없어진다
	
	//반환형이 있고 매개변수가 없는 메소드 구현
	//두 개의 수를 더하고 그 결화를 반환하는 기능
	public int calculator3() { 
		//반환형(지금 int)있으면 {}안에 반드시 return이라는 예약어가 있어야 함!!!!
		System.out.println("=== 계산기 프로그램 ===");
		Scanner sc = new Scanner(System.in);
		System.out.print("정수 : ");
		int su = sc.nextInt();
		System.out.print("정수 : ");
		int su2 = sc.nextInt();
		return su+su2; //return 뒤에 반환형과 일치하는 자료형 변수/리터럴 옴
		//return은 단 한 개의 자료형만 가능!여러 개 값 보내고 싶으면 배열이나 객체 사용
	}
	
	//반환형이 있고 매개변수가 있는 메소드 구현
	public int calculator4(int su, int su2) {
		return su+su2;
	}
	
	
	
	
}
