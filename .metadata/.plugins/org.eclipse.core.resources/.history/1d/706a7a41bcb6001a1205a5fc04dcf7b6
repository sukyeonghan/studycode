package com.student.view;

import java.util.Scanner;

import com.student.controller.StudentManager;
import com.student.model.vo.Grade;
import com.student.model.vo.Student;

public class Mainview {
	//client에게 보여지는 화면을 담당하는 객체
	
	private StudentManager sm;
	//여기 주소를 최초 생성한 sm으로 유지하겠다 
	//동일한 주소값을 줘서 같은 저장공간을 사용하도록 함
	
	//1. main 화면
	public void mainMenu(StudentManager sm) { 
		
		this.sm=sm; //지역변수지만 무한루프여서 저장소 꺼지지 않는다
		
		System.out.println("==== 학생관리 프로그램 01 ====");
		
		Scanner sc = new Scanner(System.in);
		
		while(true) {
			System.out.println("1.학생 등록");
			System.out.println("2.전체 학생 조회");
			System.out.println("3.이름으로 조회");
			System.out.println("4.성적 등록하기");//누구 성적? 이름 연결-있는지 확인-있으면 가져오기
			System.out.println("5.학년으로 조회하기");
			System.out.println("6.성적 조회하기"); //이름치면 성적 나오기
			System.out.println("0.프로그램 종료");
			System.out.print("선택 : ");
			
			int choice=sc.nextInt();
			
			switch(choice) {
				case 1 : this.sm.enrollStudent(); break; //this 빼도 됨
				case 2 : this.sm.searchAll(); break;
				case 3 : this.sm.searchName(); break;
				case 4 : this.sm.inputGrade(); break;
				//case 5 : this.sm.searchGrade(); break;
				case 6 : ;break;
				case 0 : System.out.println("프로그램을 종료합니다.");return;
				//메소드 종료.메인메뉴를 호출한 곳으로 돌아간다.(스튜던트 매니저로)
				}
			}
		}
	
	//학생정보 입력받는 화면기능(메소드) -> 입력받은 것을 StudentManager에게 반환!
	public Student enrollStudent() {
		
		Scanner sc = new Scanner(System.in);
		
		System.out.println("===== 학생등록 화면 ====");
		System.out.print("이름 : ");
		String name = sc.nextLine();
		System.out.print("학년 : ");
		int grade = sc.nextInt();
		System.out.print("반 : ");
		int ban = sc.nextInt();
		System.out.print("번호 : ");
		int number = sc.nextInt();
		System.out.print("주소 : ");
		sc.nextLine();
		String address=sc.nextLine();
		System.out.print("전화번호 : ");
		String phone = sc.nextLine();
		
		Student s = new Student(name,grade,ban,number,address,phone);
		//6개를 리턴해야하니까 객체 student로 받음
		//한 개의 자료형만 리턴할 수 있다
		
		return s;
		
		
	}

	
	//알람을 출력해주는 기능 추가
	//지금 계속 메소드 만들고 있다! 서로 계속 주고 받으면서 구현되간다~
	public void printMsg(String msg) {
		System.out.println("===== 시스템 메세지 =====");
		System.out.println("알림 : "+msg);
		System.out.println();
		System.out.println();
	}
	
	//이름 입력받는 기능
	public String inputName() {
		System.out.println("==== 이름으로 조회 ====");
		Scanner sc = new Scanner(System.in);
		System.out.print("이름 : ");
		String name = sc.nextLine();
		return name;
		
	}
	
	//student출력가능 만들기
	public void printStudents(Student[] students) {
		for(Student s : students) {
			if(s!=null) {
			System.out.println(s.information());
			if(s.getGradePoint()!=null) {
				System.out.println("성적 : "+s.getGradePoint().printGrade());
				}
			}
		}
	
	}
	
	//성적 입력 받는 기능. 로직 구성
	public Grade inputGrade() {
		System.out.println("==== 성적 등록 ====");
		Scanner sc = new Scanner(System.in);
		
		Grade g = new Grade();
		System.out.print("국어 : ");
		int kor = sc.nextInt(); 
		//g.setKor=(sc.nextInt());
		System.out.print("영어 : ");
		int eng = sc.nextInt();
		//g.setEng=(sc.nextInt());
		System.out.print("수학 : ");
		int math = sc.nextInt();
		//g.setMath=(sc.nextInt());
		System.out.print("코딩 : ");
		int coding = sc.nextInt();
		//g.setCoding=(sc.nextInt());   //왜 오류????
		
//		Grade grade = new Grade(kor,eng,math,coding);
//		//순서 섞이면 데이터 오염 가능성 있어 setter로 많이 씀
//		return grade;
		
//		return new Grade(kor,eng,math,coding);
		//이렇게 한 번에도 가능
		
		return g;
	}
	
	
//	//학년 입력 받는 기능
//	public int inputGrade() {
//		System.out.println("==== 학년으로 조회 ====");
//		Scanner sc = new Scanner(System.in);
//		System.out.print("학년 : ");
//		int grade = sc.nextInt();
//		return grade;
//	}
}
